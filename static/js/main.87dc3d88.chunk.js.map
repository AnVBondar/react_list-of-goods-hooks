{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Empty","sortMethod","setSortMethod","isReverse","setIsReverse","visibleGoods","goods","sortedGoods","Alphabet","sort","good1","good2","localeCompare","reverse","Length","length","getSortedGoods","className","type","cn","onClick","state","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,gBAAAA,E,UAAAA,M,KAoDE,IAAME,EAAgB,WAC3B,MAAoCC,mBAASH,EAASI,OAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACMC,EA5CR,SACEC,EADF,GAMG,IAHCL,EAGF,EAHEA,WACAE,EAEF,EAFEA,UAGII,EAAW,YAAOD,GAExB,OAAIH,GAAaF,IAAeL,EAASY,SAChCD,EACJE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MAC3CE,UAGDV,GAAaF,IAAeL,EAASkB,OAChCP,EACJE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMK,OAASJ,EAAMI,UAC5CF,UAGDV,EACKI,EAAYM,WAGjBZ,GACFM,EAAYE,MAAK,SAACC,EAAOC,GACvB,OAAQV,GACN,KAAKL,EAASY,SACZ,OAAOE,EAAME,cAAcD,GAC7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKRR,GAMcS,CACnBnB,EACA,CACEI,aACAE,cAIJ,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYlB,IAAeL,EAASY,WAExCY,QAAS,kBAAMlB,EAAcN,EAASY,WAPxC,iCAYA,wBACEU,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYlB,IAAeL,EAASkB,SAExCM,QAAS,kBAAMlB,EAAcN,EAASkB,SAPxC,4BAyBE,wBACEI,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAahB,IAEjBiB,QAAS,kBAAMhB,GAAa,SAAAiB,GAAK,OAAKA,MAPxC,sBAaApB,GAAcE,IACd,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPlB,EAAcN,EAASI,OACvBI,GAAa,IALjB,sBAaHC,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,UClJhCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.87dc3d88.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  Empty = '',\n}\n\ninterface FilterParams {\n  sortMethod: SortType;\n  isReverse: boolean;\n}\n\nfunction getSortedGoods(\n  goods: string[],\n  {\n    sortMethod,\n    isReverse,\n  }: FilterParams,\n) {\n  const sortedGoods = [...goods];\n\n  if (isReverse && sortMethod === SortType.Alphabet) {\n    return sortedGoods\n      .sort((good1, good2) => good1.localeCompare(good2))\n      .reverse();\n  }\n\n  if (isReverse && sortMethod === SortType.Length) {\n    return sortedGoods\n      .sort((good1, good2) => good1.length - good2.length)\n      .reverse();\n  }\n\n  if (isReverse) {\n    return sortedGoods.reverse();\n  }\n\n  if (sortMethod) {\n    sortedGoods.sort((good1, good2) => {\n      switch (sortMethod) {\n        case SortType.Alphabet:\n          return good1.localeCompare(good2);\n        case SortType.Length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return sortedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortMethod, setSortMethod] = useState(SortType.Empty);\n  const [isReverse, setIsReverse] = useState(false);\n  const visibleGoods = getSortedGoods(\n    goodsFromServer,\n    {\n      sortMethod,\n      isReverse,\n    },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortMethod !== SortType.Alphabet },\n          )}\n          onClick={() => setSortMethod(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortMethod !== SortType.Length },\n          )}\n          onClick={() => setSortMethod(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        {!isReverse ? (\n          <button\n            type=\"button\"\n            className={cn(\n              'button',\n              'is-warning',\n              { 'is-light': !isReverse },\n            )}\n            onClick={() => setIsReverse(state => !state)}\n          >\n            Reverse\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className={cn(\n              'button',\n              'is-warning',\n              { 'is-light': !isReverse },\n            )}\n            onClick={() => setIsReverse(state => !state)}\n          >\n            Reverse\n          </button>\n        )}\n\n        {(sortMethod || isReverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortMethod(SortType.Empty);\n              setIsReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      {visibleGoods.map(good => (\n        <li data-cy=\"Good\" key={good}>{good}</li>\n      ))}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}